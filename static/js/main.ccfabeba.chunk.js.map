{"version":3,"sources":["Save.js","App.js","reportWebVitals.js","index.js"],"names":["Save","props","_useState","useState","_useState2","_slicedToArray","text","setText","React","createElement","onSubmit","event","preventDefault","onSave","className","htmlFor","type","id","placeholder","value","onChange","target","App","savedWords","setSavedWords","_useState3","_useState4","verificationText","setVerificationText","_useState5","_useState6","message","setMessage","word","concat","_toConsumableArray","includes","role","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"6LAoCeA,MAlCf,SAAcC,GACV,IAAAC,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAYpB,OACII,IAAAC,cAAA,QAAMC,SAXW,SAACC,GAClBA,EAAMC,iBACNX,EAAMY,OAAOP,GACbC,EAAQ,MAQsB,IAC1BC,IAAAC,cAAA,OAAKK,UAAU,cACXN,IAAAC,cAAA,SAAOM,QAAQ,4BAA2B,iBAC1CP,IAAAC,cAAA,SACIO,KAAK,OACLF,UAAU,eACVG,GAAG,2BACHC,YAAY,eACZC,MAAOb,EACPc,SAdK,SAACT,GAClBJ,EAAQI,EAAMU,OAAOF,WAgBjBX,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQO,KAAK,SAASF,UAAU,mBAAkB,U,MCoC/CQ,MA7Df,WACE,IAAApB,EAAoCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAzCqB,EAAUnB,EAAA,GAAEoB,EAAapB,EAAA,GAChCqB,EAAgDtB,mBAAS,IAAGuB,EAAArB,YAAAoB,EAAA,GAArDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,EAA8B1B,mBAAS,IAAG2B,EAAAzB,YAAAwB,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAmB1B,OACEtB,IAAAC,cAAA,OAAKK,UAAU,kBACbN,IAAAC,cAAA,OAAKK,UAAU,aACbN,IAAAC,cAAA,MAAIK,UAAU,aAAY,0BAC1BN,IAAAC,cAAA,KAAGK,UAAU,QAAO,0DAGpBN,IAAAC,cAAA,MAAIK,UAAU,SACdN,IAAAC,cAACT,EAAI,CAACa,OAZO,SAACoB,GAClBT,EAAc,GAADU,OAAAC,YAAKZ,GAAU,CAAEU,QAWE,IAC5BzB,IAAAC,cAAA,MAAIK,UAAU,SACdN,IAAAC,cAAA,QAAMC,SAvBqB,SAACC,GAChCA,EAAMC,iBACFW,EAAWa,SAAST,GACtBK,EAAW,kCAEXA,EAAW,wCAkBiC,IACxCxB,IAAAC,cAAA,OAAKK,UAAU,cACbN,IAAAC,cAAA,SAAOM,QAAQ,4BAA2B,IAA+C,2CAGzFP,IAAAC,cAAA,SACEO,KAAK,OACLF,UAAU,eACVG,GAAG,2BACHC,YAAY,eACZC,MAAOQ,EACPP,SAtCqB,SAACT,GAChCiB,EAAoBjB,EAAMU,OAAOF,WAwC3BX,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQO,KAAK,SAASF,UAAU,mBAAkB,WAInDiB,GACCvB,IAAAC,cAAA,OAAKK,UAAS,SAAAoB,OAAWX,EAAWa,SAAST,GAAoB,gBAAkB,eAAc,SAASU,KAAK,SAC5GN,MC7CEO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,OCADS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5C,IAAAC,cAACD,IAAM6C,WAAU,KACf7C,IAAAC,cAACa,EAAG,QAORgB,K","file":"static/js/main.ccfabeba.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Save(props) {  // Component Save is defined as a function that returns JSX code (HTML-like code)\r\n    const [text, setText] = useState(''); // The state is initialized with an empty string\r\n\r\n    const handleSubmit = (event) => { // This function is called when the form is submitted\r\n        event.preventDefault();\r\n        props.onSave(text); // The onSave function is called with the value of the input field\r\n        setText(''); // The state is updated with an empty string\r\n    };\r\n\r\n    const handleChange = (event) => { // This function is called every time the input field changes\r\n        setText(event.target.value); // The state is updated with the value of the input field\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}> {/* The handleSubmit function is called when the form is submitted */}\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"exampleFormControlInput1\">Save the word</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"exampleFormControlInput1\"\r\n                    placeholder=\"Enter a word\"\r\n                    value={text}\r\n                    onChange={handleChange} // The handleChange function is called every time the input field changes\r\n                />\r\n            </div>\r\n            <ul></ul>\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n                Save\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Save;","import React, { useState } from 'react';\nimport Save from './Save';\nimport './App.css';\n\nfunction App() {  // Component App is defined as a function that returns JSX code (HTML-like code)\n  const [savedWords, setSavedWords] = useState([]); // The state is initialized with an empty array\n  const [verificationText, setVerificationText] = useState(''); // The state is initialized with an empty string\n  const [message, setMessage] = useState(''); // The state is initialized with an empty string\n\n  const handleVerificationChange = (event) => { // This function is called every time the input field changes\n    setVerificationText(event.target.value); // The state is updated with the value of the input field\n  };\n\n  const handleVerificationSubmit = (event) => { // This function is called when the form is submitted\n    event.preventDefault(); // The default behavior of the form is prevented\n    if (savedWords.includes(verificationText)) { // If the word is in the dictionary\n      setMessage('The word is in the dictionary!'); // The message is updated\n    } else { // If the word is not in the dictionary\n      setMessage('The word is not in the dictionary.'); // The message is updated\n    }\n  };\n\n  const handleSave = (word) => { // This function is called when the form is submitted\n    setSavedWords([...savedWords, word]); // The state is updated with the value of the input field\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">Dictionary Application</h1>\n        <p className=\"lead\">\n          This project has been built using React and Bootstrap.\n        </p>\n        <hr className=\"my-4\" />\n        <Save onSave={handleSave} /> {/* The Save component is rendered */}\n        <hr className=\"my-4\" />\n        <form onSubmit={handleVerificationSubmit}> {/* The handleVerificationSubmit function is called when the form is submitted */}\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleFormControlInput2\"> {/* The label is linked to the input field */}\n              Verify if the word is in the dictionary\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"exampleFormControlInput2\"\n              placeholder=\"Enter a word\"\n              value={verificationText}\n              onChange={handleVerificationChange}\n            />\n          </div>\n          <ul></ul>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Verify\n          </button>\n        </form>\n        {message && (\n          <div className={`alert ${savedWords.includes(verificationText) ? 'alert-success' : 'alert-danger'} mt-3`} role=\"alert\">\n            {message}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}